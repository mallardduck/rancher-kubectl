name: Publish Images
on:
  push:
  pull_request:
    types:
      - closed

env:
  IMAGE_REPO: mallardduck/kubectl

jobs:
  validate-versions:
    name: "Check kubectl release versions"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: scripts/check-versions.sh
  image-prebuild:
    needs:
      - validate-versions
    name: Precompile list of builds
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.new-versions.outputs.value }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Find existing images
        id: existing-version
        run: |
          VALUES=$(skopeo list-tags docker://${IMAGE_REPO} |jq '.Tags | join(" ")')
          echo "EXISTING_VERSIONS=${VALUES}" >> "$GITHUB_OUTPUT"
      - name: Find new versions
        id: new-versions
        env:
          EXISTING_VERSIONS: ${{ steps.existing-version.outputs.EXISTING_VERSIONS }}
        run: |
          touch new-versions.txt
          ./scripts/new-versions.sh
          JSON=$(jq -R . new-versions.txt | jq -sc .)
          echo "value=${JSON}"
          echo "value=${JSON}" >> "$GITHUB_OUTPUT"
      - run: |
          echo "${{ steps.new-versions.outputs.value }}"
  image-build:
    needs:
      - image-prebuild
    name: Build and push image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{fromJSON(needs.image-prebuild.outputs.matrix)}}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPO }}
      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: .
          file: package/Dockerfile
          platforms: "linux/amd64,linux/arm64"
          push: true
          tags: ${{ env.IMAGE_REPO }}:${{ matrix.version }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Get CPU Arch hashes
        run: |
          docker manifest inspect ${{ env.IMAGE_REPO }}:${{ matrix.version }} | jq --raw-output '.manifests[]
            | select(.platform.architecture | IN("amd64", "arm64"))
            | "IMAGE_\(.platform.architecture | ascii_upcase)=\(.digest)"' >> "$GITHUB_ENV"
      - name: Tag CPU Arch Images
        run: |
          docker image pull ${{ env.IMAGE_REPO }}@${{ env.IMAGE_AMD64 }}
          docker tag ${{ env.IMAGE_REPO }}@${{ env.IMAGE_AMD64 }}  ${{ env.IMAGE_REPO }}:${{ matrix.version }}-amd64
          docker push ${{ env.IMAGE_REPO }}:${{ matrix.version }}-amd64
          docker image pull ${{ env.IMAGE_REPO }}@${{ env.IMAGE_ARM64 }}
          docker tag ${{ env.IMAGE_REPO }}@${{ env.IMAGE_ARM64 }}  ${{ env.IMAGE_REPO }}:${{ matrix.version }}-arm64
          docker push ${{ env.IMAGE_REPO }}:${{ matrix.version }}-arm64