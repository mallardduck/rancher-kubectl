name: Add new versions
on:
  workflow_dispatch:
  schedule:
    - cron:  '0 9 * * 1,5'

permissions:
  contents: write
  pull-requests: write
jobs:
  add-new-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Run add-new-versions.sh
        id: run
        run: |
          bash scripts/add-new-versions.sh > add-new-versions.output
          if grep -q ^Added add-new-versions.output; then
            new_versions=$(grep ^Added add-new-versions.output)
            echo "new_versions=${new_versions}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check for repository changes
        run: |
          if git diff --name-only --exit-code; then
            echo "No changes found in repository"
            echo "changes_exist=false" >> $GITHUB_ENV
          else
            echo "Changes found in repository"
            git diff --name-only
            echo "changes_exist=true" >> $GITHUB_ENV
          fi
      - name: Create branch, commit and push
        if: ${{ env.changes_exist == 'true' }}
        id: branch
        run: |
          BRANCH="githubaction-add-new-versions-$(date +%Y-%m-%d-%H-%M-%S)"
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git checkout -b "$BRANCH"
          git commit -a -m "Adding new versions"
          git push origin "$BRANCH"
      - name: Create Pull Request
        if: ${{ env.changes_exist == 'true' }}
        id: cpr
        uses: actions/github-script@v7
        env:
          SOURCE_BRANCH: ${{ steps.branch.outputs.branch }}
          NEW_VERSIONS: ${{ steps.run.outputs.new_versions }}
          PR_TITLE: "Adding new versions"
        with:
          script: |
            const {SOURCE_BRANCH, NEW_VERSIONS, PR_TITLE} = process.env
            const { data: existingPRsList } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            const existingPRs = existingPRsList.filter(pr => pr.title === PR_TITLE)
            const prBody = `${NEW_VERSIONS}\n\nAuto-generated by GitHub Actions, initiated by @${context.actor}`

            const { data: createdPR } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: PR_TITLE,
              body: prBody,
              base: context.ref,
              head: SOURCE_BRANCH
            })
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: createdPR.number,
              labels: ["status/auto-created"]
            })

            if (existingPRs) {
              for (const existing of existingPRs) {
                console.log(existingPRs)
              }
            }